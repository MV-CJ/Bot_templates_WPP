// activityChecker.js
const TIMEOUT_LIMIT = 10 * 1000; // 10 segundos em milissegundos

const userActivity = {}; // Armazena a √∫ltima atividade de cada usu√°rio

const checkActivity = (sock, sender) => {
    const now = Date.now();
    console.log(`Verificando atividade para ${sender}: agora=${now}, √∫ltima atividade=${userActivity[sender] ? userActivity[sender].lastActive : 'undefined'}`); // Log de verifica√ß√£o

    if (!userActivity[sender]) {
        userActivity[sender] = { lastActive: now, status: 'ativo' }; // Inicializa a atividade do usu√°rio
        return false; // O usu√°rio √© ativo na primeira vez
    }

    if (now - userActivity[sender].lastActive > TIMEOUT_LIMIT) {
        console.log(`Usu√°rio ${sender} desconectado devido √† inatividade.`); // Log de desconex√£o
        userActivity[sender].status = 'inativo'; // Muda o status para inativo
        sock.sendMessage(sender, { text: 'ü§ñ Voc√™ foi desconectado devido √† inatividade. Inicie uma nova conversa quando estiver pronto!' });
        return true; // Retorna true se o usu√°rio foi desconectado
    }

    return false; // Retorna false se o usu√°rio est√° ativo
};

// Fun√ß√£o para atualizar a atividade do usu√°rio
const updateActivity = (sender) => {
    userActivity[sender] = { lastActive: Date.now(), status: 'ativo' }; // Atualiza a √∫ltima atividade do usu√°rio
    console.log(`Atividade atualizada para ${sender} em ${userActivity[sender].lastActive}`); // Log de atualiza√ß√£o
    console.log('Estado atual do userActivity:', userActivity); // Log do estado atual
};

// Fun√ß√£o para verificar o status de cada usu√°rio a cada 5 segundos
const checkAllUsersActivity = (sock, userState) => {
    const now = Date.now();
    for (const sender in userState) {
        // Verifique se o usu√°rio est√° ativo
        if (userState[sender] && userState[sender].status === 'ativo') {
            if (checkActivity(sock, sender)) {
                // Se o usu√°rio foi desconectado, limpa o estado do usu√°rio
                userState[sender] = { menuShown: false, status: 'inativo' }; // Atualiza para inativo
            }
        }
    }
};

// Exporta as fun√ß√µes
module.exports = { checkActivity, updateActivity, userActivity, TIMEOUT_LIMIT, checkAllUsersActivity };
